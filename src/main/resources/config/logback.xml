<?xml version="1.0" encoding="UTF-8"?>

<!-- [scanPeriod]마다 설정 파일의 변경을 확인하고, 파일이 변경되면 다시 로딩한다 -->
<configuration scan="true" scanPeriod="2 seconds">
    <!-- Logback에서는 Logback 자체에서 발생하는 이벤트를 처리 -->
    <property name="LOGS_ABSOLUTE_PATH" value="${HOME}/TelegramBot/logs"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}][%-5p] [%t] %m - \(%F:%L\)%n</pattern>
        </layout>
    </appender>

    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_ABSOLUTE_PATH}/bot.log</file>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %highlight([%-5level]) [%t] %cyan(%m) - \(%F:%L - %c.%M\)%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_ABSOLUTE_PATH}/log.%d{yyyyMMdd}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>120</maxHistory>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="async" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1000</queueSize>
        <threshold>100</threshold>
        <appender-ref ref="file"/>
    </appender>

    <root level="debug">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="async"/>
    </root>
</configuration>